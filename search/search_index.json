{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to LCDL MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"manifeste/","title":"Manifeste du dev","text":""},{"location":"manifeste/#nos-valeurs","title":"Nos valeurs","text":"<p>Etre developpeur au Chemin du Local c'est respecter un ensemble de valeurs  communes qui font \u00e9cho parmis nos utilisateurs !</p>"},{"location":"manifeste/#le-partage","title":"Le partage","text":"<p>Premi\u00e8re de toutes ces valeurs : le partage. C'est \u00e0 notre sens la valeur principale du chemin du local. c'est avant tout partager son travail, ses r\u00eaves et ses ambitions ! Nous voulons \u00eatre plus qu'une ESN, nous voulons que nos  actions aient un impact concr\u00eat autour de nous : pour \u00e7a il faut les partager !</p>"},{"location":"manifeste/#la-simplicite","title":"La simplicit\u00e9","text":"<p>La simplicit\u00e9 comme valeur fondamentale de notre d\u00e9vellopement, nous voulons rompre avec les processus complexes, les hi\u00e9rarchies pyramidales. Nous voulons qu'au quotidien nos programmeurs appliquent cette philosphie \u00e0 leur travail, dans l'optique de simplifier la vie de l'utilisateur.</p>"},{"location":"manifeste/#lhumilite","title":"L'humilit\u00e9","text":"<p>Au chemin du local nous sommes des humains, ainsi ils nous arrivent de nous tromper, c'est pour \u00e7a que l'humilit\u00e9 reste essentielle. Etre humble, pour nous, c'est avant tout \u00eatre \u00e0 l'\u00e9coute de nos utilisateurs, essayer de comprendre au mieux leurs besoins et ensemble faire de grandes choses !!</p>"},{"location":"manifeste/#lexcellence-et-la-qualite","title":"L'excellence et la qualit\u00e9","text":"<p>Nos utilisateurs attendent de nous que nos services r\u00e9pondent \u00e0 leurs besoins au quotidien. Il est alors essentiel de maintenir une excellence et une qualit\u00e9 op\u00e9rationnel. Au chemin du local, la satisfaction de nos utilisateurs est notre principale objectif.</p>"},{"location":"manifeste/#les-bonnes-pratiques","title":"Les bonnes pratiques","text":""},{"location":"manifeste/#une-langue-parlee-unique","title":"Une langue parl\u00e9e unique","text":"<p>Dans un soucis de coh\u00e9rence mais aussi de convention il est important de d\u00e9finir le langage utilis\u00e9 dans le code.</p>"},{"location":"manifeste/#distinction-entre-ecriture-de-code-et-ecriture-destine-a-un-publique","title":"Distinction entre \u00e9criture de code et \u00e9criture destin\u00e9 \u00e0 un publique","text":"<p>Afin de simplifier la compr\u00e9hension, on consid\u00e8rera que toute ligne et mot produit dans un fichier de code, y compris les documentations, seront consid\u00e9r\u00e9s comme du code. </p> <p>Bien que le code doivent \u00eatre \u00e9crit de fa\u00e7on \u00e0 ce qu'il puisse \u00eatre lu par d'autres d\u00e9veloppeurs, dans le cas de la langue on fera la distinction entre le code sp\u00e9cifiquement destin\u00e9 \u00e0 \u00eatre lu, tel que les commentaires et la documentation, et le code strict comme la syntaxe du langage et les nom de variable.</p> <ul> <li> <p>le code strict devra \u00eatre r\u00e9dig\u00e9 en anglais \ud83c\uddec\ud83c\udde7</p> </li> <li> <p>le code destin\u00e9 sp\u00e9cifiquement \u00e0 \u00eatre lu sera r\u00e9dig\u00e9 en fran\u00e7ais \ud83c\uddeb\ud83c\uddf7</p> </li> </ul>"},{"location":"manifeste/#le-respect-des-conventions","title":"Le respect des conventions","text":"<p>Afin d'uniformiser le code de mani\u00e8re \u00e0 toujours donn\u00e9 l'impression que ce dernier n'a \u00e9t\u00e9 produit que par un unique d\u00e9veloppeurs, chacun de nous devra respecter des conventions strictes dans chaques languages utilis\u00e9s.</p> <p>Ces derni\u00e8res ayant d\u00e9j\u00e0 \u00e9t\u00e9 tr\u00e8s bien r\u00e9dig\u00e9, voici les conventions que nous choisissons pour :</p> <ul> <li> <p>Le Dart : https://dart.dev/guides/language/effective-dart/style</p> </li> <li> <p>Le Go : https://go.dev/doc/effective_go</p> </li> <li> <p>La JavaScript/Typescript https://google.github.io/styleguide/tsguide.html</p> </li> </ul>  <p>Petite note sur le JavaScript : l'utilisation de Typescript est impos\u00e9 d\u00e8s qu'elle est possible. Cela ce justifie par le fait que Typescript rend le langage fortement typ\u00e9 et permet une meilleur coh\u00e9rence dans le code.</p>  <p>De mani\u00e8re g\u00e9n\u00e9rale d\u00e8s qu'une question se pose sur le style, nommage, ou autre question de syntaxe il en viendra de se r\u00e9f\u00e9rer aux conventions de Google.</p>"},{"location":"manifeste/#la-documentation-et-les-commentaires","title":"La documentation et les commentaires","text":"<p>Le code devra toujours \u00eatre comment\u00e9. Toutefois, avant d'\u00e9crire un commentaire il faut s'assurer que le commentaire explique toujours le pourquoi et pas le quoi.</p> <p>De tr\u00e8s bonnes pratiques peuvent se trouver ici et ce sont ces bonnes pratiques qui seront suivit par l'\u00e9quipe.</p> <p>Pour rapidement r\u00e9sumer l'article :</p> <ul> <li> <p>les commentaires ne doivent pas appara\u00eetre comme une duplication du code</p> </li> <li> <p>les commentaires ne doivent pas excuser du mauvais code et il vaut mieux r\u00e9\u00e9crire le code de fa\u00e7on \u00e0 ce qu'il soit compr\u00e9hensible sans commentaire plut\u00f4t que de le commenter</p> </li> <li> <p>il est important de commenter le code qui peut para\u00eetre comme non \u00e9vident pour un autre d\u00e9veloppeurs et qui pourrait tenter d'\u00eatre simplifier</p> </li> <li> <p>il faut mettre des commentaires citant les sources lorsque le code est copi\u00e9 de quelque part (comme par exemple Stack overflow)</p> </li> <li> <p>les commentaires peuvent annoter une fonction mofier, incomplette etc.</p> </li> </ul> <p>Il revient donc de commenter le code au fure et a mesure qu'il est \u00e9crit, mais aussi de documenter les fonctions publiques en respectant les conventions cit\u00e9 plus haut.</p>"},{"location":"manifeste/#quelques-bonnes-pratiques-sur-lecriture-du-code","title":"quelques bonnes pratiques sur l'\u00e9criture du code","text":"<p>Afin de s'assurer d'avoir la base de code la plus robuste et p\u00e9renne possible, il y a certaines bonnes pratiques qui peuvent \u00eatre appliqu\u00e9. En voici une liste non exhaustive mais qui donne d\u00e9j\u00e0 une bonne direction</p>"},{"location":"manifeste/#ecrire-du-code-minimaliste","title":"\u00c9crire du code minimaliste","text":"<p>Par principe, une fonction ne doit pas faire plus de 50 lignes de code (commentaires exclues). Cela permet d'aider \u00e0 garder un code avec des fonctions compr\u00e9hensible et qui ne font pas plusieurs t\u00e2ches diff\u00e9rentes.</p>"},{"location":"manifeste/#ecrire-un-code-testable","title":"\u00c9crire un code testable","text":"<p>Chaque fonction devra \u00eatre pens\u00e9e avec une id\u00e9e de teste derri\u00e8re. Cela signifie et rejoins le fait que chaque fonction a une utilit\u00e9 unique puisque il faut pouvoir avoir une attente bien pr\u00e9cise en fonction des entr\u00e9es donn\u00e9es.</p>"},{"location":"manifeste/#les-messages-de-conmit","title":"Les messages de conmit","text":"<p>Lea messagea de commit seront tous r\u00e9dig\u00e9s en Fran\u00e7ais et devront contenir au plus 70 caract\u00e8res. Afin de bien indiquer \u00e0 quoi correspond le commit, un smiley sera toujours mis sn premier caract\u00e8re aelon </p>"},{"location":"manifeste/#utilisation-de-git-et-github","title":"utilisation de Git et GitHub","text":"<p>Nous avons fait le choix se GitHub pour h\u00e9berger nos repository git. M\u00eame si ce choix peut \u00eatre amen\u00e9 \u00e0 \u00e9voluer avec le temps, le m\u00eame principe devrait pouvoir s'appliquer. Les r\u00e8gles suivantes s'appliquent d'ailleurs pour l'int\u00e9gralit\u00e9 des repository cr\u00e9\u00e9s</p>"},{"location":"manifeste/#les-branches","title":"Les branches","text":"<p>Chaque projets aura au moins deux branches </p> <ul> <li> <p>la branche <code>master</code> sur laquelle se trouve le code qui a \u00e9t\u00e9 d\u00e9ploy\u00e9 o\u00f9 au moins valid\u00e9 comme stable par l'\u00e9quipe de d\u00e9veloppement</p> </li> <li> <p>la branche <code>dev</code> qui est la branche de travail avec toutes les fonctionnalit\u00e9s compl\u00e9t\u00e9s</p> </li> </ul> <p>De plus nous aurons une branche par feature, afin que chaque fonctionnalit\u00e9s puissent \u00eatre revu avant d'\u00eatre fusionner sur la branche <code>dev</code></p>"},{"location":"manifeste/#les-feature","title":"Les feature","text":""},{"location":"manifeste/#definition","title":"D\u00e9finition","text":"<p>Pour chaque fonctionnalit\u00e9s ou t\u00e2che (par exemple : cr\u00e9er les endpoint du chat ou encore cr\u00e9er la page de profil, une branche et une issue sera cr\u00e9\u00e9. Ainsi, les issues pourront \u00eatre attribu\u00e9es et \u00e9ventuellement, sur GitHub, tri\u00e9s dans la section projet.</p>"},{"location":"manifeste/#le-review","title":"Le review","text":"<p>D\u00e8s que le d\u00e9veloppeur assign\u00e9 \u00e0 une feature estime avoir termin\u00e9, il devra cr\u00e9er une pull request sur la branche dev afin que son code soit revu par un autre d\u00e9veloppeurs. Sauf cas exceptionnel, un d\u00e9veloppeur ne peut pas review sa propre feature.</p>"}]}